//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.TDE
{
    using global::TDE;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public class UITestPanelData : QFramework.UIPanelData
    {
        public ServerData model;
    }
    
    public partial class UITestPanel : QFramework.UIPanel
    {
        
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        string sceneName = "";
        string currenName;
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UITestPanelData ?? new UITestPanelData();
            Button.onClick.AddListener(
            () => {
              
              UIMgr.OpenPanel<UIServerDatasMenuPanel>(new UIServerDatasMenuPanelData() { ServerData = mData.model });});

            ButtonError.onClick.AddListener(() => {
                WebSocketMessage message = new WebSocketMessage() { Id = Global.bindDataDict["4"].Value.Id, State = Global.bindDataDict["4"].Value.State, Data = Global.bindDataDict["4"].Value.Data };
                message.State = "ERROR";
                Global.bindDataDict["4"].Value = message;
            });
            ButtonWarningg.onClick.AddListener(() => {
                WebSocketMessage message = new WebSocketMessage() { Id = Global.bindDataDict["4"].Value.Id, State = Global.bindDataDict["4"].Value.State, Data = Global.bindDataDict["4"].Value.Data };
                message.State = "WARNING";
                Global.bindDataDict["4"].Value = message;      
            });
            // NORMAL
            ButtonNormal.onClick.AddListener(() =>
            {
                WebSocketMessage message = new WebSocketMessage() { Id = Global.bindDataDict["4"].Value.Id, State = Global.bindDataDict["4"].Value.State, Data = Global.bindDataDict["4"].Value.Data };
                message.State = "NORMAL";
                Global.bindDataDict["4"].Value = message;
            });

            //读取
            ButtonReadScene.onClick.AddListener(OpenViewAndInit);
            //上传
            ButtonUpLoadScene.onClick.AddListener(() => { UITextScnenName.text = currenName; UIUPloadBG.gameObject.Show(); });
            //确定
            ScenesScrollButton.onClick.AddListener(() => {
                if (!sceneName.IsNullOrEmpty())
                {
                     mData.model.GetScene(sceneName,(scene)=> {
                         if (scene.IsNotNull())Global.currentSceneData.Value = scene;
                         currenName = sceneName;
                         ScenesScrollView.gameObject.Hide();

                     });              
                }
                else Log.I("没有选中场景选项或者 sceneName值： {0} 有误" + sceneName);
            });
            //关闭
            ScenesScrollCloseButton.onClick.AddListener(() => { ScenesScrollView.gameObject.Hide(); });
            //输入事件
            UIUPloadInputField.onValueChanged.AddListener(str =>  UITextScnenName.text = str);

            //上传 确定事件
            UIUPloadButton.onClick.AddListener(() => {
                if (!UITextScnenName.text.Trim().IsNullOrEmpty()) {
                    currenName = UITextScnenName.text.Trim();
                    string json = Global.currentSceneData.Value.Save();
                    if (!json.IsNullOrEmpty())
                    {
                        string jsonSer = string.Format("name={0}&josnStr={1}", currenName, json);
                       // mData.model.SceneAddOrUpdata(jsonSer,(str)=> { UIUPloadBG.gameObject.Hide(); });               
                    }
                } });
            UIUPloadCloseButton.onClick.AddListener(() => { UIUPloadBG.gameObject.Hide(); });
        }
        

        //打开场景列表面板
        void OpenViewAndInit()
        {
            ScenesScrollView.gameObject.Show();
            if (Content.transform.childCount > 0)
                for (int i = 0; i < Content.transform.childCount; i++)
                {
                    Destroy(Content.transform.GetChild(i).gameObject);
                }
             mData.model.GetAllScenes((scenes)=> {
                 foreach (string item in scenes)
                 {
                     UIDataToggle.Instantiate()
                         .ApplySelfTo(self =>
                         {
                             Toggle to = self.GetComponent<Toggle>();
                             to.group = Content;
                             self.Label.text = item;
                             to.onValueChanged.AddListener(bo => { if (bo) { Log.I(self.Label.text); sceneName = self.Label.text; } });
                         })
                         .ApplySelfTo(self => self.transform.SetParent(Content.transform, false))
                         .ApplySelfTo(self => self.Show());
                 }
             }) ;

            
        }

       
        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }
    }
}
