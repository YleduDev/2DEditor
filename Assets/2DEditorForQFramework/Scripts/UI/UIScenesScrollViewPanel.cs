//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.TDE
{
    using global::TDE;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public class UIScenesScrollViewPanelData : QFramework.UIPanelData
    {
        public ServerData model;
    }
    
    public partial class UIScenesScrollViewPanel : QFramework.UIPanel
    {
        string sceneName = "";
        string currenName;
        ServerData model;
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIScenesScrollViewPanelData ?? new UIScenesScrollViewPanelData();
            // please add init code here        
            //确定
            model = mData.model;
            ScenesScrollButton.onClick.AddListener(() => {
                if (!sceneName.IsNullOrEmpty())
                {
                    model.GetScene(sceneName, (scene) => {
                        if (scene.IsNotNull())
                            Global.currentSceneData.Value = scene;
                        currenName = sceneName;
                        UIManager.Instance.HideUI<UIScenesScrollViewPanel>();

                    });
                }
                else Log.I("没有选中场景选项或者 sceneName值： {0} 有误" + sceneName);
            });
            //关闭
            ScenesScrollCloseButton.onClick.AddListener(() => UIManager.Instance.HideUI<UIScenesScrollViewPanel>());
        }
        
       void Init()
       {
            sceneName = "";
            ScenesScrollView.gameObject.Show();
            if (Content.transform.childCount > 0)
                for (int i = 0; i < Content.transform.childCount; i++)
                {
                    Destroy(Content.transform.GetChild(i).gameObject);
                }
            model.GetAllScenes((scenes) => {
                if(scenes.IsNotNull()&& scenes.Count>0)
                foreach (string item in scenes)
                {
                    UISceneDataToggle.Instantiate()
                        .ApplySelfTo(self =>
                        {
                            Toggle to = self.GetComponent<Toggle>();
                            to.group = Content;
                            self.Label.text = item;
                            to.onValueChanged.AddListener(bo => { if (bo)  sceneName = self.Label.text; } );
                        })
                        .ApplySelfTo(self => self.transform.SetParent(Content.transform, false))
                        .ApplySelfTo(self => self.Show());
                }
            });
        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
            Init();
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }
    }
}
